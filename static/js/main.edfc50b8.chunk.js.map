{"version":3,"sources":["components/PatientInfo.js","components/CovidMap.js","components/ListInfected.js","components/SeekBar.js","components/CovidDashboard.js","components/Stats/VNGraph/VNGraph.js","components/Stats/WorldGraph/WorldGraph.js","components/Stats/Stats.js","App.js","serviceWorker.js","index.js"],"names":["PatientInfo","name","address","note","verifyDate","id","CovidMap","onPatientMarkerClicked","patients","lat","lng","Map","key","center","zoom","TileLayer","attribution","url","map","patient","i","Marker","position","onClick","Popup","ListInfected","name_current_patient","onListGroupItemClicked","document","querySelectorAll","useEffect","forEach","innerText","scrollIntoView","behavior","className","ListGroup","Item","options","year","month","day","startDate","Date","toLocaleDateString","today","dateRange","start_date","end_date","push","setDate","getDate","getDateRange","SeekBar","onClickHandleDateRange","useState","indexDateOfRange","setIndexDateOfRange","isActive","setIsActive","interval","setInterval","updateIndex","clearInterval","step","min","max","length","values","onChange","indexOfDateRange","renderTrack","props","children","style","height","width","backgroundColor","renderThumb","CovidDashboard","originPatient","setOriginPatient","currentPatient","setCurrentPatient","setPatients","dateSelectedOfRange","setDateSelectedOfRange","patientMarkerClickedHandler","patientListGroupItemClickedHandler","updatePatientListWithDateRange","result","index","getTime","a","fetch","json","then","response","sort_list_patient","data","sort","b","error","fetchData","Container","Row","Col","xs","date","chartRef","React","createRef","VNGraph","setPatientVN","property","split","resultDate","ngay","array","drawChart","fetchDataVN","patientVN","current","myChartRef","getContext","dateInfected","infected","doubtInfected","cured","Chart","type","labels","datasets","label","fill","borderColor","scales","xAxes","ticks","autoSkip","maxTicksLimit","ref","WorldGraph","setPatientWorld","fetchDataWorld","patientWorld","deadPatients","curedPatients","Stats","md","App","to","exact","path","render","Boolean","window","location","hostname","match","require","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.edfc50b8.chunk.js","sourcesContent":["import React from 'react';\nimport './PatientInfo.css'\n\nconst PatientInfo = ({name, address, note, verifyDate}) => {\n    return <>\n        <div id='title-patient-info'>\n            Patient Information\n        </div>\n        <ul>\n            <li>Name: {name}</li>\n            <li>Address: {address}</li>\n            <li>Note: {note}</li>\n            <li>Verify Date: {verifyDate}</li>\n        </ul>\n    </>\n};\n\nexport default PatientInfo;","import React from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst CovidMap = ({onPatientMarkerClicked, patients, lat, lng}) => {\n    return <Map key={'covid-map'} center={[lat, lng]} zoom={13}>\n            <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png   \"\n            />\n            {patients && patients.map((patient, i) => \n                <Marker key={'patient-marker' + i} position={[patient.lat, patient.lng]} \n                    onClick={() => {onPatientMarkerClicked(patient)}}>\n                    <Popup>\n                        <ul>\n                            <li>Name: {patient.name}</li>\n                            <li>Address: {patient.address}</li>\n                            <li>Note: {patient.note}</li>\n                            <li>Verify date: {patient.verifyDate}</li>\n                        </ul>\n                    </Popup>\n                </Marker>\n            )}\n        </Map>;\n};\n\nexport default CovidMap;\n","import React, { useEffect } from 'react';\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport './ListInfected.css'\r\nconst ListInfected = ({patients, name_current_patient, onListGroupItemClicked}) => {\r\n\r\n    let listInfect = document.querySelectorAll(\".infected-patient\");\r\n\r\n    function scrollTo(name) {\r\n        listInfect = document.querySelectorAll(\".infected-patient\");\r\n        listInfect.forEach((patient, i) => {\r\n            const patientName = patient.innerText;\r\n            if (patientName === name) {\r\n                patient.scrollIntoView({behavior: 'smooth'});\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() =>{\r\n        if (name_current_patient) {\r\n            scrollTo(name_current_patient)\r\n        }\r\n    })\r\n    \r\n    return <>\r\n        <div className='title-list-infected-patient'>\r\n            List Infected Patients\r\n        </div>\r\n        <ListGroup id='wrap-list-infected'>\r\n            {patients && patients.map((patient, i) =>  \r\n                <ListGroup.Item key={'list-infected-' + i} className='infected-patient'\r\n                    onClick={() => {onListGroupItemClicked(patient)}}>\r\n                    {patient.name} \r\n                </ListGroup.Item>\r\n            )}\r\n        </ListGroup>\r\n    </>\r\n};\r\n\r\nexport default ListInfected;","import React, { useState, useEffect } from 'react';\r\nimport './SeekBar.css';\r\nimport { Range } from 'react-range';\r\n\r\nconst getDateRange = (start_date, end_date) => {\r\n    start_date = new Date(start_date)\r\n    let dateRange = []\r\n    while(start_date <= end_date) {\r\n        dateRange.push(new Date (start_date))\r\n        start_date.setDate(start_date.getDate() +1);\r\n    }\r\n    return dateRange;\r\n}\r\nconst options = { year: 'numeric', month: 'long', day: 'numeric' }\r\nconst startDate = new Date('2019-12-08').toLocaleDateString([],options)\r\nconst today = new Date().toLocaleDateString([],options)\r\nconst dateRange = getDateRange('2019-12-08', new Date())\r\n\r\nconst SeekBar = ({onClickHandleDateRange, patients}) => {\r\n    \r\n    const [indexDateOfRange, setIndexDateOfRange] = useState([0]);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    function toggle() {\r\n        setIsActive(!isActive);\r\n    }\r\n\r\n    function reset() {\r\n        setIndexDateOfRange([0]);\r\n        setIsActive(false);\r\n    }\r\n\r\n    const getSizeDateRange = (dateRange) => {\r\n        return dateRange.length - 1;\r\n    }\r\n\r\n    const handleDateRange = (indexOfDateRange, onClick) => {\r\n        setIndexDateOfRange(indexOfDateRange)\r\n        onClick(dateRange[indexOfDateRange])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n          interval = setInterval(() => {\r\n            let updateIndex = []\r\n            updateIndex.push(indexDateOfRange[0] + 1)\r\n            onClickHandleDateRange(dateRange[updateIndex])\r\n            setIndexDateOfRange(updateIndex);\r\n          }, 1000);\r\n        } else if (!isActive && indexDateOfRange !== 0) {\r\n          clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n      }, [isActive, indexDateOfRange]);\r\n\r\n    return (\r\n        <div className='wrap-seek-bar'>\r\n            <div className='wrap-current-date-selected'>\r\n                <span className='title-current-date'>\r\n                    Current date: &nbsp;\r\n                </span>\r\n                <span>\r\n                    {\r\n                        dateRange[indexDateOfRange].toLocaleDateString([],options)\r\n                    }\r\n                </span>\r\n                <div>\r\n                    <button className={`button button-primary button-play-pause button-primary-${isActive ? 'active' : 'inactive'}`} onClick={toggle}>\r\n                        {isActive ? 'Pause' : 'Start'}\r\n                    </button>\r\n                    <button className=\"button button-reset\" onClick={reset}>\r\n                        Reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className='wrap-title-start-end-date'>\r\n                 <span className='title-start-date'>{startDate}</span>\r\n                 <span className='title-end-date'>{today}</span>\r\n            </div>\r\n            { (typeof(patients) !== 'undefined' || patients != null) ? \r\n                <Range\r\n                    step={1}\r\n                    min={0}\r\n                    max={getSizeDateRange(dateRange)}\r\n                    values={indexDateOfRange}\r\n                    onChange={indexDateOfRange => handleDateRange(indexDateOfRange, onClickHandleDateRange)}\r\n                    renderTrack={({ props, children }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '6px',\r\n                            width: '100%',\r\n                            backgroundColor: '#ccc'\r\n                            }}\r\n                        >\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                    renderThumb={({ props }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '42px',\r\n                            width: '42px',\r\n                            backgroundColor: '#999'\r\n                            }}\r\n                        />\r\n                    )}\r\n                />\r\n                : ''\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SeekBar;\r\n// (patients[indexDateOfRange].toLocaleDateString([],options))\r\n{/* <Range\r\n                    step={1}\r\n                    min={0}\r\n                    max={getSizeDateRange(dateRange)}\r\n                    values={indexDateOfRange}\r\n                    onChange={indexDateOfRange => handleDateRange(indexDateOfRange, onClickHandleDateRange)}\r\n                    renderTrack={({ props, children }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '6px',\r\n                            width: '100%',\r\n                            backgroundColor: '#ccc'\r\n                            }}\r\n                        >\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                    renderThumb={({ props }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '42px',\r\n                            width: '42px',\r\n                            backgroundColor: '#999'\r\n                            }}\r\n                        />\r\n                    )}\r\n                />  */}","import React, {useEffect, useState} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport PatientInfo from \"./PatientInfo\";\nimport Container from \"react-bootstrap/Container\";\nimport CovidMap from \"./CovidMap\";\nimport ListInfected from \"./ListInfected\";\nimport SeekBar from \"./SeekBar\"\n// import axios from 'axios';\n\n\nconst CovidDashboard = (props) => {\n    const init_lat = 10.762887, init_lng = 106.6800684;\n    const [originPatient, setOriginPatient] = useState([])\n    const [currentPatient, setCurrentPatient] = useState();\n    const [patients, setPatients] = useState([]);\n    const [dateSelectedOfRange, setDateSelectedOfRange] = useState(new Date('2019-12-08'))\n\n    \n\n    const patientMarkerClickedHandler = (patient) => {\n        setCurrentPatient(patient);\n    }\n\n    const patientListGroupItemClickedHandler = (patient) => {\n        setCurrentPatient(patient);\n    }\n\n    const handleDateRange = (date) => {\n        setDateSelectedOfRange(date)\n        updatePatientListWithDateRange(date)\n    }\n\n    const updatePatientListWithDateRange = (dateSelectedOfRange) => {\n        let result = []\n        originPatient.map((patient, index) => {\n            const verifyDate = new Date(patient.verifyDate)\n            if(verifyDate.getTime() <= dateSelectedOfRange.getTime()) {\n                result.push(patient);\n            }\n        })\n        setPatients(result);\n        return result\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const res = await fetch(\"https://cors-anywhere.herokuapp.com/maps.vnpost.vn/apps/covid19/api/patientapi/list\")\n            res.json()\n            .then(\n                (response) => {\n                    const sort_list_patient = response.data.sort((a, b) => (new Date(a.verifyDate) >= new Date(b.verifyDate)) ? -1 : 1);\n                    setOriginPatient(sort_list_patient)\n                    let result = []\n                    sort_list_patient.map((patient, index) => {\n                        const verifyDate = new Date(patient.verifyDate)\n                        if(verifyDate.getTime() <= dateSelectedOfRange.getTime()) {\n                            result.push(patient);\n                        }\n                    })\n                    setPatients(result);\n                },\n                (error) => {\n                    // setIsLoaded(true);\n                    // setError(error);\n                }\n            )\n            \n        }\n        fetchData(dateSelectedOfRange);\n    }, [])\n    \n    return <Container>\n        <Row>\n            {currentPatient ? \n                <Col xs={9}><CovidMap onPatientMarkerClicked={patientMarkerClickedHandler} patients={patients} lat={currentPatient.lat} lng={currentPatient.lng}/></Col>\n                : <Col xs={9}><CovidMap onPatientMarkerClicked={patientMarkerClickedHandler} patients={patients} lat={init_lat} lng={init_lng}/></Col>\n            }\n            <Col xs={3}>\n                {currentPatient &&\n                <PatientInfo name={currentPatient.name} address={currentPatient.address} note={currentPatient.note}\n                             verifyDate={currentPatient.verifyDate}/>}\n\n                {currentPatient ? <ListInfected patients={patients} name_current_patient={currentPatient.name} onListGroupItemClicked={patientListGroupItemClickedHandler} /> \n                    : <ListInfected patients={patients} name_current_patient={''} onListGroupItemClicked={patientListGroupItemClickedHandler} /> }\n                \n            </Col>\n        </Row>\n        <Row>\n            <SeekBar onClickHandleDateRange={handleDateRange} patients={patients}/>\n        </Row>\n    </Container>\n};\n\nexport default CovidDashboard;","import React, { Component, useEffect, useState } from 'react'\r\nimport Chart from \"chart.js\";\r\n\r\nconst options = { year: 'numeric', month: 'long', day: 'numeric' };\r\nlet chartRef = React.createRef();\r\n\r\nconst VNGraph = (props) => {\r\n    const [patientVN, setPatientVN] = useState([]);\r\n    const [dateRange, setDateRange] = useState(new Date());\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchDataVN = async () => {\r\n            const res = await fetch(\"https://cors-anywhere.herokuapp.com/https://td.fpt.ai/corona/corona-chart-vn.json\")\r\n            res.json()\r\n            .then(\r\n                (response) => {\r\n                    let result = []\r\n                    for (const property in response) {\r\n                        const date = property.split(/\\s+/)[1].split(\"/\");\r\n\r\n                        const day = date[0];\r\n                        const month = date[1];\r\n\r\n                        const resultDate = new Date(month + \"/\" + day + \"/2020\");\r\n                        if(resultDate <= dateRange) {\r\n                            result.push({ngay: resultDate, array: response[property]});\r\n                        }\r\n                    }\r\n                    setPatientVN(result);\r\n                    drawChart(result);\r\n\r\n                },\r\n                (error) => {\r\n                    // setIsLoaded(true);\r\n                    // setError(error);\r\n                }\r\n            )\r\n        }\r\n        fetchDataVN();\r\n    }, [])\r\n\r\n    const drawChart = (patientVN) => {\r\n        if(chartRef !== null && chartRef.current !== null){\r\n            const myChartRef = chartRef.current.getContext(\"2d\");\r\n\r\n            let dateInfected = [], infected = [], doubtInfected = [], cured = [];\r\n\r\n            patientVN.forEach(patient => {\r\n                dateInfected.push(patient.ngay.toLocaleDateString([],options))\r\n                infected.push(patient.array[0]);\r\n                doubtInfected.push(patient.array[1]);\r\n                cured.push(patient.array[2]);\r\n            })\r\n\r\n            \r\n            new Chart(myChartRef, {\r\n                type: \"line\",\r\n                data: {\r\n                    //Bring in data\r\n                    labels: dateInfected,\r\n                    datasets: [\r\n                        {\r\n                            label: \"Nhiem\",\r\n                            data: infected,\r\n                            fill: false,\r\n                            borderColor: \"red\"\r\n                        }, \r\n                        {\r\n                            label: \"Nghi Nhiem\",\r\n                            data: doubtInfected,\r\n                            fill: false,\r\n                            borderColor: \"orange\"\r\n                        },\r\n                        {\r\n                            label: \"Hoi phuc\",\r\n                            data: cured,\r\n                            fill: false,\r\n                            borderColor: \"green\"\r\n                        },\r\n                    ]\r\n                },\r\n                options: {\r\n                    scales: {\r\n                        xAxes: [{\r\n                            ticks: {\r\n                              autoSkip: true,\r\n                              maxTicksLimit: 18\r\n                            }\r\n                        }]\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <canvas\r\n                id=\"myChart\"\r\n                ref={chartRef}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VNGraph;","import React, { Component, useEffect, useState } from 'react'\r\nimport Chart from \"chart.js\";\r\n\r\nconst options = { year: 'numeric', month: 'long', day: 'numeric' };\r\nlet chartRef = React.createRef();\r\n\r\nconst WorldGraph = (props) => {\r\n    const [patientWorld, setPatientWorld] = useState([]);\r\n    const [dateRange, setDateRange] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const fetchDataWorld = async () => {\r\n            const res = await fetch(\"https://cors-anywhere.herokuapp.com/https://td.fpt.ai/corona/corona-total.json\")\r\n            res.json()\r\n            .then(\r\n                (response) => {\r\n                    let result = []\r\n                    for (const property in response) {\r\n                        const date = property\r\n\r\n                        let resultDate = \"\"\r\n                        if(date === \"Dec 8\"){\r\n                            resultDate = new Date(date + \", 2019\");\r\n                        }\r\n                        else{\r\n                            resultDate = new Date(date + \", 2020\");\r\n                        }\r\n                        if(resultDate <= dateRange) {\r\n                            result.push({ngay: resultDate, array: response[property]});\r\n                        }\r\n                    }\r\n                    setPatientWorld(result);\r\n                    drawChart(result);\r\n\r\n                },\r\n                (error) => {\r\n                    // setIsLoaded(true);\r\n                    // setError(error);\r\n                }\r\n            )\r\n        }\r\n        fetchDataWorld();\r\n    }, [])\r\n\r\n    const drawChart = (patientWorld) => {\r\n        if(chartRef !== null && chartRef.current !== null){\r\n            const myChartRef = chartRef.current.getContext(\"2d\");\r\n\r\n            let dateInfected = [], doubtInfected = [], deadPatients = [], curedPatients = [];\r\n\r\n            patientWorld.forEach(patient => {\r\n                dateInfected.push(patient.ngay.toLocaleDateString([],options))\r\n                doubtInfected.push(patient.array[0]);\r\n                deadPatients.push(patient.array[1]);\r\n                curedPatients.push(patient.array[2]);\r\n\r\n            })\r\n\r\n            \r\n            new Chart(myChartRef, {\r\n                type: \"line\",\r\n                data: {\r\n                    //Bring in data\r\n                    labels: dateInfected,\r\n                    datasets: [\r\n                        {\r\n                            label: \"Nhiem\",\r\n                            data: doubtInfected,\r\n                            fill: false,\r\n                            borderColor: \"orange\"\r\n                        },\r\n                        {\r\n                            label: \"Tu vong\",\r\n                            data: deadPatients,\r\n                            fill: false,\r\n                            borderColor: \"red\"\r\n                        },\r\n                        {\r\n                            label: \"Khoi benh\",\r\n                            data: curedPatients,\r\n                            fill: false,\r\n                            borderColor: \"green\"\r\n                        },\r\n                    ]\r\n                },\r\n                options: {\r\n                    scales: {\r\n                        xAxes: [{\r\n                            ticks: {\r\n                              autoSkip: true,\r\n                              maxTicksLimit: 18\r\n                            }\r\n                        }]\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <canvas\r\n                id=\"myChart\"\r\n                ref={chartRef}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorldGraph;","import React, {useEffect, useState} from 'react';\r\nimport VNGraph from './VNGraph/VNGraph';\r\nimport WorldGraph from './WorldGraph/WorldGraph';\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport './Stats.css';\r\n\r\n\r\n// import classes from \"./LineGraph.module.css\";\r\n\r\nconst Stats = () => {\r\n    // const [patientVN, setPatientVN] = useState([]);\r\n    const [dateRange, setDateRange] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Row >\r\n                <Col md={6}> \r\n                    <div className=\"title-graph\">\r\n                        Vietname graph\r\n                    </div>\r\n                    <VNGraph />\r\n                </Col>\r\n\r\n                <Col md={6}> \r\n                    <div className=\"title-graph\">\r\n                        World Graph\r\n                    </div>\r\n                    <WorldGraph />\r\n                </Col>\r\n            </Row>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats;","import React from 'react';\nimport { Switch, Route, Link, Redirect } from \"react-router-dom\";\n\nimport './App.css';\nimport CovidDashboard from \"./components/CovidDashboard\";\nimport Stats from './components/Stats/Stats'\n\nexport default function App() {\n    return (\n        <>\n            <div className=\"wrap-router\">\n                <div className={ \"link-map \" }>\n                    <Link to=\"/map\" > Map </Link>\n                </div>\n                <div className={ \"link-stats \" }>\n                    <Link to=\"/stats\"> Stats </Link>\n                </div>\n            </div>\n\n            <hr />\n\n            <Switch>\n                <Route exact path=\"/\" render={() => (\n                    <Redirect to=\"/map\"/>\n                )}/>\n                <Route exact path=\"/react-covid\" render={() => (\n                    <Redirect to=\"/map\"/>\n                )}/>\n                <Route exact path=\"/map\">\n                    <CovidDashboard />\n                </Route>\n                <Route path=\"/stats\">\n                    <Stats />\n                </Route>\n            </Switch>\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nrequire('./mocks');\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}