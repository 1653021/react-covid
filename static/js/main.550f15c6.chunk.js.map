{"version":3,"sources":["components/PatientInfo.js","components/CovidMap.js","components/ListInfected.js","components/SeekBar.js","components/CovidDashboard.js","App.js","serviceWorker.js","index.js"],"names":["PatientInfo","name","address","note","verifyDate","id","CovidMap","onPatientMarkerClicked","patients","lat","lng","Map","key","center","zoom","TileLayer","attribution","url","map","patient","i","Marker","position","onClick","Popup","ListInfected","name_current_patient","onListGroupItemClicked","document","querySelectorAll","useEffect","forEach","innerText","scrollIntoView","behavior","className","ListGroup","Item","options","year","month","day","startDate","Date","toLocaleDateString","today","dateRange","start_date","end_date","push","setDate","getDate","getDateRange","SeekBar","onClickHandleDateRange","useState","indexDateOfRange","setIndexDateOfRange","isActive","setIsActive","interval","setInterval","updateIndex","clearInterval","step","min","max","length","getSizeDateRange","values","onChange","indexOfDateRange","renderTrack","props","children","style","height","width","backgroundColor","renderThumb","CovidDashboard","originPatient","setOriginPatient","currentPatient","setCurrentPatient","setPatients","dateSelectedOfRange","setDateSelectedOfRange","patientMarkerClickedHandler","patientListGroupItemClickedHandler","updatePatientListWithDateRange","result","index","getTime","a","fetch","then","res","json","response","sort_list_patient","data","sort","b","error","fetchData","Container","Row","Col","xs","date","App","Boolean","window","location","hostname","match","require","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4XAiBeA,G,MAdK,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WACvC,OAAO,oCACH,yBAAKC,GAAG,sBAAR,uBAGA,4BACI,qCAAWJ,GACX,wCAAcC,GACd,qCAAWC,GACX,4CAAkBC,O,wCCafE,EAtBE,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,uBAAwBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,IAAKC,EAAS,EAATA,IACtD,OAAO,kBAACC,EAAA,EAAD,CAAKC,IAAK,YAAaC,OAAQ,CAACJ,EAAKC,GAAMI,KAAM,IAChD,kBAACC,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,gDAEPT,GAAYA,EAASU,KAAI,SAACC,EAASC,GAAV,OACtB,kBAACC,EAAA,EAAD,CAAQT,IAAK,iBAAmBQ,EAAGE,SAAU,CAACH,EAAQV,IAAKU,EAAQT,KAC/Da,QAAS,WAAOhB,EAAuBY,KACvC,kBAACK,EAAA,EAAD,KACI,4BACI,qCAAWL,EAAQlB,MACnB,wCAAckB,EAAQjB,SACtB,qCAAWiB,EAAQhB,MACnB,4CAAkBgB,EAAQf,oB,QCqBvCqB,G,MAnCM,SAAC,GAA8D,IAA7DjB,EAA4D,EAA5DA,SAAUkB,EAAkD,EAAlDA,qBAAsBC,EAA4B,EAA5BA,uBAElCC,SAASC,iBAAiB,qBAkB3C,OANAC,qBAAU,WAVV,IAAkB7B,EAWVyB,IAXUzB,EAYDyB,EAXAE,SAASC,iBAAiB,qBAC5BE,SAAQ,SAACZ,EAASC,GACLD,EAAQa,YACR/B,GAChBkB,EAAQc,eAAe,CAACC,SAAU,kBAWvC,oCACH,yBAAKC,UAAU,+BAAf,0BAGA,kBAACC,EAAA,EAAD,CAAW/B,GAAG,sBACTG,GAAYA,EAASU,KAAI,SAACC,EAASC,GAAV,OACtB,kBAACgB,EAAA,EAAUC,KAAX,CAAgBzB,IAAK,iBAAmBQ,EAAGe,UAAU,mBACjDZ,QAAS,WAAOI,EAAuBR,KACtCA,EAAQlB,a,wBClBvBqC,EAAU,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WACjDC,EAAY,IAAIC,KAAK,cAAcC,mBAAmB,GAAGN,GACzDO,GAAQ,IAAIF,MAAOC,mBAAmB,GAAGN,GACzCQ,EAZe,SAACC,EAAYC,GAC9BD,EAAa,IAAIJ,KAAKI,GAEtB,IADA,IAAID,EAAY,GACVC,GAAcC,GAChBF,EAAUG,KAAK,IAAIN,KAAMI,IACzBA,EAAWG,QAAQH,EAAWI,UAAW,GAE7C,OAAOL,EAKOM,CAAa,aAAc,IAAIT,MAsGlCU,EApGC,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,uBAAwB9C,EAAc,EAAdA,SAAc,EAEJ+C,mBAAS,CAAC,IAFN,mBAE7CC,EAF6C,KAE3BC,EAF2B,OAGpBF,oBAAS,GAHW,mBAG7CG,EAH6C,KAGnCC,EAHmC,KAsCpD,OAfA7B,qBAAU,WACN,IAAI8B,EAAW,KAWf,OAVIF,EACFE,EAAWC,aAAY,WACrB,IAAIC,EAAc,GAClBA,EAAYb,KAAKO,EAAiB,GAAK,GACvCF,EAAuBR,EAAUgB,IACjCL,EAAoBK,KACnB,KACOJ,GAAiC,IAArBF,GACtBO,cAAcH,GAET,kBAAMG,cAAcH,MAC1B,CAACF,EAAUF,IAGZ,yBAAKrB,UAAU,iBACX,yBAAKA,UAAU,8BACX,0BAAMA,UAAU,sBAAhB,sBAGA,8BAEQW,EAAUU,GAAkBZ,mBAAmB,GAAGN,IAG1D,6BACI,4BAAQH,UAAS,iEAA4DuB,EAAW,SAAW,YAAcnC,QA7CjI,WACIoC,GAAaD,KA6CIA,EAAW,QAAU,SAE1B,4BAAQvB,UAAU,sBAAsBZ,QA5CxD,WACIkC,EAAoB,CAAC,IACrBE,GAAY,KA0CA,WAKR,yBAAKxB,UAAU,6BACV,0BAAMA,UAAU,oBAAoBO,GACpC,0BAAMP,UAAU,kBAAkBU,IAEf,qBAAdrC,GAAyC,MAAZA,EACnC,kBAAC,QAAD,CACIwD,KAAM,EACNC,IAAK,EACLC,IApDS,SAACpB,GACtB,OAAOA,EAAUqB,OAAS,EAmDTC,CAAiBtB,GACtBuB,OAAQb,EACRc,SAAU,SAAAd,GAAgB,OAlDCjC,EAkDqC+B,EAjD5EG,EADqBc,EAkDqCf,QAhD1DjC,EAAQuB,EAAUyB,IAFE,IAACA,EAAkBhD,GAmD3BiD,YAAa,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACT,yCACQD,EADR,CAEIE,MAAK,eACFF,EAAME,MADJ,CAELC,OAAQ,MACRC,MAAO,OACPC,gBAAiB,WAGhBJ,IAGTK,YAAa,gBAAGN,EAAH,EAAGA,MAAH,OACT,yCACQA,EADR,CAEIE,MAAK,eACFF,EAAME,MADJ,CAELC,OAAQ,OACRC,MAAO,OACPC,gBAAiB,eAK3B,KClBHE,EAnFQ,SAACP,GACpB,IAD8B,EAEYlB,mBAAS,IAFrB,mBAEvB0B,EAFuB,KAERC,EAFQ,OAGc3B,qBAHd,mBAGvB4B,EAHuB,KAGPC,EAHO,OAIE7B,mBAAS,IAJX,mBAIvB/C,EAJuB,KAIb6E,EAJa,OAKwB9B,mBAAS,IAAIZ,KAAK,eAL1C,mBAKvB2C,EALuB,KAKFC,EALE,KASxBC,EAA8B,SAACrE,GACjCiE,EAAkBjE,IAGhBsE,EAAqC,SAACtE,GACxCiE,EAAkBjE,IAQhBuE,EAAiC,SAACJ,GACpC,IAAIK,EAAS,GAQb,OAPAV,EAAc/D,KAAI,SAACC,EAASyE,GACL,IAAIjD,KAAKxB,EAAQf,YACtByF,WAAaP,EAAoBO,WAC3CF,EAAO1C,KAAK9B,MAGpBkE,EAAYM,GACLA,GA8BX,OA3BA7D,qBAAU,YACS,uCAAG,sBAAAgE,EAAA,sDACdC,MAAM,uFACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,IAAMC,EAAoBD,EAASE,KAAKC,MAAK,SAACR,EAAGS,GAAJ,OAAW,IAAI5D,KAAKmD,EAAE1F,aAAe,IAAIuC,KAAK4D,EAAEnG,aAAgB,EAAI,KACjH8E,EAAiBkB,GACjB,IAAIT,EAAS,GACbS,EAAkBlF,KAAI,SAACC,EAASyE,GACT,IAAIjD,KAAKxB,EAAQf,YACtByF,WAAaP,EAAoBO,WAC3CF,EAAO1C,KAAK9B,MAGpBkE,EAAYM,MAEhB,SAACa,OAhBS,2CAAH,qDAuBfC,CAAUnB,KACX,IAEI,kBAACoB,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,KACKxB,EACG,kBAACyB,EAAA,EAAD,CAAKC,GAAI,GAAG,kBAAC,EAAD,CAAUtG,uBAAwBiF,EAA6BhF,SAAUA,EAAUC,IAAK0E,EAAe1E,IAAKC,IAAKyE,EAAezE,OAC1I,kBAACkG,EAAA,EAAD,CAAKC,GAAI,GAAG,kBAAC,EAAD,CAAUtG,uBAAwBiF,EAA6BhF,SAAUA,EAAUC,IAhE5F,UAgE2GC,IAhErF,eAkE/B,kBAACkG,EAAA,EAAD,CAAKC,GAAI,GACJ1B,GACD,kBAAC,EAAD,CAAalF,KAAMkF,EAAelF,KAAMC,QAASiF,EAAejF,QAASC,KAAMgF,EAAehF,KACjFC,WAAY+E,EAAe/E,aAEvC+E,EAAiB,kBAAC,EAAD,CAAc3E,SAAUA,EAAUkB,qBAAsByD,EAAelF,KAAM0B,uBAAwB8D,IACjH,kBAAC,EAAD,CAAcjF,SAAUA,EAAUkB,qBAAsB,GAAIC,uBAAwB8D,MAIlG,kBAACkB,EAAA,EAAD,KACI,kBAAC,EAAD,CAASrD,uBA7DO,SAACwD,GACrBvB,EAAuBuB,GACvBpB,EAA+BoB,IA2DuBtG,SAAUA,OC9EzDuG,MANf,WACI,OACI,kBAAC,EAAD,OCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAQ,IAERC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5F,SAAS6F,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMyB,c","file":"static/js/main.550f15c6.chunk.js","sourcesContent":["import React from 'react';\nimport './PatientInfo.css'\n\nconst PatientInfo = ({name, address, note, verifyDate}) => {\n    return <>\n        <div id='title-patient-info'>\n            Patient Information\n        </div>\n        <ul>\n            <li>Name: {name}</li>\n            <li>Address: {address}</li>\n            <li>Note: {note}</li>\n            <li>Verify Date: {verifyDate}</li>\n        </ul>\n    </>\n};\n\nexport default PatientInfo;","import React from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst CovidMap = ({onPatientMarkerClicked, patients, lat, lng}) => {\n    return <Map key={'covid-map'} center={[lat, lng]} zoom={13}>\n            <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png   \"\n            />\n            {patients && patients.map((patient, i) => \n                <Marker key={'patient-marker' + i} position={[patient.lat, patient.lng]} \n                    onClick={() => {onPatientMarkerClicked(patient)}}>\n                    <Popup>\n                        <ul>\n                            <li>Name: {patient.name}</li>\n                            <li>Address: {patient.address}</li>\n                            <li>Note: {patient.note}</li>\n                            <li>Verify date: {patient.verifyDate}</li>\n                        </ul>\n                    </Popup>\n                </Marker>\n            )}\n        </Map>;\n};\n\nexport default CovidMap;\n","import React, { useEffect } from 'react';\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport './ListInfected.css'\r\nconst ListInfected = ({patients, name_current_patient, onListGroupItemClicked}) => {\r\n\r\n    let listInfect = document.querySelectorAll(\".infected-patient\");\r\n\r\n    function scrollTo(name) {\r\n        listInfect = document.querySelectorAll(\".infected-patient\");\r\n        listInfect.forEach((patient, i) => {\r\n            const patientName = patient.innerText;\r\n            if (patientName === name) {\r\n                patient.scrollIntoView({behavior: 'smooth'});\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() =>{\r\n        if (name_current_patient) {\r\n            scrollTo(name_current_patient)\r\n        }\r\n    })\r\n    \r\n    return <>\r\n        <div className='title-list-infected-patient'>\r\n            List Infected Patients\r\n        </div>\r\n        <ListGroup id='wrap-list-infected'>\r\n            {patients && patients.map((patient, i) =>  \r\n                <ListGroup.Item key={'list-infected-' + i} className='infected-patient'\r\n                    onClick={() => {onListGroupItemClicked(patient)}}>\r\n                    {patient.name} \r\n                </ListGroup.Item>\r\n            )}\r\n        </ListGroup>\r\n    </>\r\n};\r\n\r\nexport default ListInfected;","import React, { useState, useEffect } from 'react';\r\nimport './SeekBar.css';\r\nimport { Range } from 'react-range';\r\n\r\nconst getDateRange = (start_date, end_date) => {\r\n    start_date = new Date(start_date)\r\n    let dateRange = []\r\n    while(start_date <= end_date) {\r\n        dateRange.push(new Date (start_date))\r\n        start_date.setDate(start_date.getDate() +1);\r\n    }\r\n    return dateRange;\r\n}\r\nconst options = { year: 'numeric', month: 'long', day: 'numeric' }\r\nconst startDate = new Date('2019-12-08').toLocaleDateString([],options)\r\nconst today = new Date().toLocaleDateString([],options)\r\nconst dateRange = getDateRange('2019-12-08', new Date())\r\n\r\nconst SeekBar = ({onClickHandleDateRange, patients}) => {\r\n    \r\n    const [indexDateOfRange, setIndexDateOfRange] = useState([0]);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    function toggle() {\r\n        setIsActive(!isActive);\r\n    }\r\n\r\n    function reset() {\r\n        setIndexDateOfRange([0]);\r\n        setIsActive(false);\r\n    }\r\n\r\n    const getSizeDateRange = (dateRange) => {\r\n        return dateRange.length - 1;\r\n    }\r\n\r\n    const handleDateRange = (indexOfDateRange, onClick) => {\r\n        setIndexDateOfRange(indexOfDateRange)\r\n        onClick(dateRange[indexOfDateRange])\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n          interval = setInterval(() => {\r\n            let updateIndex = []\r\n            updateIndex.push(indexDateOfRange[0] + 1)\r\n            onClickHandleDateRange(dateRange[updateIndex])\r\n            setIndexDateOfRange(updateIndex);\r\n          }, 1000);\r\n        } else if (!isActive && indexDateOfRange !== 0) {\r\n          clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n      }, [isActive, indexDateOfRange]);\r\n\r\n    return (\r\n        <div className='wrap-seek-bar'>\r\n            <div className='wrap-current-date-selected'>\r\n                <span className='title-current-date'>\r\n                    Current date: &nbsp;\r\n                </span>\r\n                <span>\r\n                    {\r\n                        dateRange[indexDateOfRange].toLocaleDateString([],options)\r\n                    }\r\n                </span>\r\n                <div>\r\n                    <button className={`button button-primary button-play-pause button-primary-${isActive ? 'active' : 'inactive'}`} onClick={toggle}>\r\n                        {isActive ? 'Pause' : 'Start'}\r\n                    </button>\r\n                    <button className=\"button button-reset\" onClick={reset}>\r\n                        Reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className='wrap-title-start-end-date'>\r\n                 <span className='title-start-date'>{startDate}</span>\r\n                 <span className='title-end-date'>{today}</span>\r\n            </div>\r\n            { (typeof(patients) !== 'undefined' || patients != null) ? \r\n                <Range\r\n                    step={1}\r\n                    min={0}\r\n                    max={getSizeDateRange(dateRange)}\r\n                    values={indexDateOfRange}\r\n                    onChange={indexDateOfRange => handleDateRange(indexDateOfRange, onClickHandleDateRange)}\r\n                    renderTrack={({ props, children }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '6px',\r\n                            width: '100%',\r\n                            backgroundColor: '#ccc'\r\n                            }}\r\n                        >\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                    renderThumb={({ props }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '42px',\r\n                            width: '42px',\r\n                            backgroundColor: '#999'\r\n                            }}\r\n                        />\r\n                    )}\r\n                />\r\n                : ''\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SeekBar;\r\n// (patients[indexDateOfRange].toLocaleDateString([],options))\r\n{/* <Range\r\n                    step={1}\r\n                    min={0}\r\n                    max={getSizeDateRange(dateRange)}\r\n                    values={indexDateOfRange}\r\n                    onChange={indexDateOfRange => handleDateRange(indexDateOfRange, onClickHandleDateRange)}\r\n                    renderTrack={({ props, children }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '6px',\r\n                            width: '100%',\r\n                            backgroundColor: '#ccc'\r\n                            }}\r\n                        >\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                    renderThumb={({ props }) => (\r\n                        <div\r\n                            {...props}\r\n                            style={{\r\n                            ...props.style,\r\n                            height: '42px',\r\n                            width: '42px',\r\n                            backgroundColor: '#999'\r\n                            }}\r\n                        />\r\n                    )}\r\n                />  */}","import React, {useEffect, useState} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport PatientInfo from \"./PatientInfo\";\nimport Container from \"react-bootstrap/Container\";\nimport CovidMap from \"./CovidMap\";\nimport ListInfected from \"./ListInfected\";\nimport SeekBar from \"./SeekBar\"\n// import axios from 'axios';\n\n\nconst CovidDashboard = (props) => {\n    const init_lat = 10.762887, init_lng = 106.6800684;\n    const [originPatient, setOriginPatient] = useState([])\n    const [currentPatient, setCurrentPatient] = useState();\n    const [patients, setPatients] = useState([]);\n    const [dateSelectedOfRange, setDateSelectedOfRange] = useState(new Date('2019-12-08'))\n\n    \n\n    const patientMarkerClickedHandler = (patient) => {\n        setCurrentPatient(patient);\n    }\n\n    const patientListGroupItemClickedHandler = (patient) => {\n        setCurrentPatient(patient);\n    }\n\n    const handleDateRange = (date) => {\n        setDateSelectedOfRange(date)\n        updatePatientListWithDateRange(date)\n    }\n\n    const updatePatientListWithDateRange = (dateSelectedOfRange) => {\n        let result = []\n        originPatient.map((patient, index) => {\n            const verifyDate = new Date(patient.verifyDate)\n            if(verifyDate.getTime() <= dateSelectedOfRange.getTime()) {\n                result.push(patient);\n            }\n        })\n        setPatients(result);\n        return result\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            fetch(\"https://cors-anywhere.herokuapp.com/maps.vnpost.vn/apps/covid19/api/patientapi/list\")\n            .then(res => res.json())\n            .then(\n                (response) => {\n                    const sort_list_patient = response.data.sort((a, b) => (new Date(a.verifyDate) >= new Date(b.verifyDate)) ? -1 : 1);\n                    setOriginPatient(sort_list_patient)\n                    let result = []\n                    sort_list_patient.map((patient, index) => {\n                        const verifyDate = new Date(patient.verifyDate)\n                        if(verifyDate.getTime() <= dateSelectedOfRange.getTime()) {\n                            result.push(patient);\n                        }\n                    })\n                    setPatients(result);\n                },\n                (error) => {\n                    // setIsLoaded(true);\n                    // setError(error);\n                }\n            )\n            \n        }\n        fetchData(dateSelectedOfRange);\n    }, [])\n    \n    return <Container>\n        <Row>\n            {currentPatient ? \n                <Col xs={9}><CovidMap onPatientMarkerClicked={patientMarkerClickedHandler} patients={patients} lat={currentPatient.lat} lng={currentPatient.lng}/></Col>\n                : <Col xs={9}><CovidMap onPatientMarkerClicked={patientMarkerClickedHandler} patients={patients} lat={init_lat} lng={init_lng}/></Col>\n            }\n            <Col xs={3}>\n                {currentPatient &&\n                <PatientInfo name={currentPatient.name} address={currentPatient.address} note={currentPatient.note}\n                             verifyDate={currentPatient.verifyDate}/>}\n\n                {currentPatient ? <ListInfected patients={patients} name_current_patient={currentPatient.name} onListGroupItemClicked={patientListGroupItemClickedHandler} /> \n                    : <ListInfected patients={patients} name_current_patient={''} onListGroupItemClicked={patientListGroupItemClickedHandler} /> }\n                \n            </Col>\n        </Row>\n        <Row>\n            <SeekBar onClickHandleDateRange={handleDateRange} patients={patients}/>\n        </Row>\n    </Container>\n};\n\nexport default CovidDashboard;","import React from 'react';\n\nimport './App.css';\nimport CovidDashboard from \"./components/CovidDashboard\";\n\nfunction App() {\n    return (\n        <CovidDashboard/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('./mocks');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}